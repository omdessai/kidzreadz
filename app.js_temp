/**
 * Sample React Native App
 * https://github.com/facebook/react-native
 *
 * @format
 * @flow strict-local
 */

import React ,{ useState } from 'react';
import {
  SafeAreaView,
  StyleSheet,
  ScrollView,
  View,
  TextInput,
  Text,
  StatusBar,
  Dimensions,
  TouchableOpacity,
} from 'react-native';

import {
  Header,
  LearnMoreLinks,
  Colors,
  DebugInstructions,
  ReloadInstructions,
} from 'react-native/Libraries/NewAppScreen';

import RNTextDetector from 'react-native-text-detector';

import { RNCamera } from 'react-native-camera';

var app_id = "b0f9fd73"
var app_key = "2d96750da5f085eeb1c96d6b27e47f08"

const deviceWidth = Dimensions.get("window").width;
const deviceHeight = Dimensions.get("window").height;

const App: () => React$Node = () => {

  const [definition, setDefinition] = useState("Meaning:");

  function getMeaning(word_id){
    setDefinition("Waiting to identify the word.....");

    return;
    language = "en-us";
  url = "https://od-api.oxforddictionaries.com:443/api/v2/entries/" + language + "/" + word_id;
  fetch(url, {
         method: 'GET',
         headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
          'app_id': app_id,
          'app_key':  app_key
        },
      })
      .then((response) => response.json())
      .then((responseJson) => {
        try{
          var meaning = responseJson.results[0].lexicalEntries[0].entries[0].senses[0].shortDefinitions[0];
         console.log(meaning);
         setDefinition(meaning)

        } catch {

        }
        
      })
      .catch((error) => {
         console.error(error);
      });
  }

  onTextRecognized = (blocks) => {
    //console.log("Text Recognized");
    //console.log(blocks);
    if(blocks.textBlocks.length >0){
      console.log("blocks identified");
      console.log(blocks.textBlocks[0].value);
    }
  }
  takePicture = async () => {
    if (this.camera) {
      console.log("On Take picture")

      try {
        const options = {
          quality: 0.8,
          base64: true,
          skipProcessing: true,
        };
        const { uri } = await this.camera.takePictureAsync(options);
        const visionResp = await RNTextDetector.detectFromUri(uri);
        console.log('visionResp', visionResp);
      } catch (e) {
        console.warn(e);
      }




      const options = { quality: 0.5, base64: true,
        skipProcessing: true };
      //const {data} = await this.camera.takePictureAsync(options);

      
        
     

      //console.log(data);
      //const visionResp = await RNTextDetector.detectFromUri(data);
      //console.log(visionResp);
    }
  };
  
  const PendingView = () => (
    <View
      style={{
        flex: 1,
        backgroundColor: 'lightgreen',
        justifyContent: 'center',
        alignItems: 'center',
      }}
    >
      <Text>Waiting</Text>
    </View>
  );
  

  return (
    <>
      <StatusBar barStyle="dark-content" />
      <View style={{flex: 1, flexDirection: 'column'}}>
      <View style={{height: 50, backgroundColor: 'powderblue'}} />
        <View style={{height: 50}} >
        
          </View>
        <View style={{height: 100, backgroundColor: 'skyblue'}} >
        <Text style={{
          flex:5,
          height: 100,
          borderColor: 'gray',
          borderWidth: 1
        }}> {definition}</Text>  
        </View>
        <View style={{height: 400, backgroundColor: 'steelblue', alignItems: 'center'}} >
        <RNCamera
          ref={(ref) => {
            this.camera = ref;
          }}
          style={styles.preview}
          type={RNCamera.Constants.Type.back}
          flashMode={RNCamera.Constants.FlashMode.off}
          //zoom={.015}
          onTextRecognized = {this.onTextRecognized}
          rectOfInterest = {{x: 10, y: 10, width: 100, height:30}}
          autoFocus = {RNCamera.Constants.AutoFocus.on}
          
          onGoogleVisionBarcodesDetected={({ barcodes }) => {
            //console.log(barcodes);
          }}
        >
          

{({ camera, status, recordAudioPermissionStatus }) => {
  //this.takePicture();
            return (
              
              <View >
              <View style={styles.rectangleColor} />
              <View style={styles.topLeft} />
              <View style={styles.topRight} />
              <View style={styles.bottomLeft} />
              <View style={styles.bottomRight} />
          </View>
            );
          }}
          </RNCamera>
        </View>
      </View>
     {/*
        <View style={styles.container}>
         
      <TextInput
        onChangeText={(value) => {
          getMeaning(value)
        }}
        style={{
          flex:1,
          height: 40,
          borderColor: 'gray',
          borderWidth: 1
        }}
        defaultValue="You can type in me"
      />
        
        
        </View>
        */}
    </>
  );
};

const styles = StyleSheet.create({
  rectangle: {
    flex:1,
    position: 'absolute',
    borderLeftColor: 'rgba(0, 0, 0, .6)',
    borderRightColor: 'rgba(0, 0, 0, .6)',
    borderTopColor: 'rgba(0, 0, 0, .6)',
    borderBottomColor: 'rgba(0, 0, 0, .6)',
    borderLeftWidth: deviceWidth / 1,
    borderRightWidth: deviceWidth / 1,
    borderTopWidth: deviceHeight / 3,
    borderBottomWidth: deviceHeight / 1
},
rectangleColor: {
  height: 250,
  width: 325,
  backgroundColor: 'transparent',
},
  container: {
    flex: 1,
    flexDirection: 'column',
    backgroundColor: Colors.lighter,
  },
  preview: {
    flex: 1,
    flexDirection: 'row',
    backgroundColor: Colors.lighter,
    justifyContent: 'center',
    alignItems: 'center',
    width: 150,
  },
  capture: {
    flex: 0,
    backgroundColor: '#fff',
    borderRadius: 8,
    padding: 15,
    paddingHorizontal: 20,
    alignSelf: 'center',
    margin: 20,
  },
  scrollView: {
    backgroundColor: Colors.lighter,
  },
  engine: {
    position: 'absolute',
    right: 0,
  },
  body: {
    backgroundColor: Colors.white,
  },
  sectionContainer: {
    marginTop: 32,
    paddingHorizontal: 24,
  },
  sectionTitle: {
    fontSize: 24,
    fontWeight: '600',
    color: Colors.black,
  },
  sectionDescription: {
    marginTop: 8,
    fontSize: 18,
    fontWeight: '400',
    color: Colors.dark,
  },
  highlight: {
    fontWeight: '700',
  },
  footer: {
    color: Colors.dark,
    fontSize: 12,
    fontWeight: '600',
    padding: 4,
    paddingRight: 12,
    textAlign: 'right',
  },
  topLeft: {
    width: 50,
    height: 50,
    borderTopWidth: 2,
    borderLeftWidth: 2,
    marginTop:10,
    marginLeft:10,
    borderLeftColor: 'green',
    borderTopColor: 'green'
},
topRight: {
    width: 50,
    height: 50,
    borderTopWidth: 2,
    borderRightWidth: 2,
    marginRight:10,
    marginTop:10,

    borderRightColor: 'green',
    borderTopColor: 'green'
},
bottomLeft: {
    width: 50,
    height: 50,
    borderBottomWidth: 2,
    borderLeftWidth: 2,
    position: 'absolute',
    left: -1,
    bottom: -1,
    borderLeftColor: 'green',
    borderBottomColor: 'green'
},
bottomRight: {
    width: 50,
    height: 50,
    borderBottomWidth: 2,
    borderRightWidth: 2,
    position: 'absolute',
    right: -1,
    bottom: -1,
    borderRightColor: 'green',
    borderBottomColor: 'green'
},
});

export default App;
